{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aosin\\\\OneDrive\\\\Desktop\\\\Smart contract\\\\Dapp\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport Web3 from \"web3\";\nimport Dex from \"./abi/Dex.json\";\nimport ERC20Mock from \"./abi/ERC20Mock.json\";\nimport WalletInfo from \"./components/WalletInfo/WalletInfo\";\nimport SwapEth from \"./components/SwapEth/SwapEth\";\nimport SwapUSDC from \"./components/SwapUSDC/SwapUSDC\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst USDC_MAINNET = \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\";\nconst USDC_DECIMALS = 6;\n\nfunction App() {\n  _s();\n\n  const [web3, setweb3] = useState(\"\");\n  const [ethBalance, setEthBalance] = useState(1);\n  const [tokenBalance, setTokenBalance] = useState(1000000000);\n  const [investor, setInvestor] = useState(1000000000);\n  const [tokenContract, setTokenContract] = useState({});\n  const [dexContract, setDexContract] = useState({});\n  const [ethAmount, setEthAmount] = useState(0);\n  const [tokenAmount, setTokenAmount] = useState(0);\n  useEffect(() => {\n    const init = async () => {\n      await loadweb3();\n    };\n\n    init();\n  }, []);\n  useEffect(() => {\n    const load = async () => {\n      await loadBlockchainData();\n    };\n\n    load();\n  }, [web3]);\n\n  const loadweb3 = async () => {\n    if (window.ethereum) {\n      try {\n        const _web3 = new Web3(window.ethereum);\n\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\"\n        });\n        setweb3(_web3);\n      } catch (error) {\n        console.error(error);\n      }\n    } else {\n      console.log(\"Please Install metamask\");\n    }\n  };\n\n  const loadBlockchainData = async () => {\n    if (web3) {\n      const [investor] = await web3.eth.getAccounts();\n      setInvestor(investor);\n      const balance = await web3.eth.getBalance(investor);\n      setEthBalance(web3.utils.fromWei(balance, \"ether\"));\n\n      const _tokenContract = new web3.eth.Contract(ERC20Mock.abi, USDC_MAINNET);\n\n      setTokenContract(_tokenContract);\n\n      let _tokenBalance = await _tokenContract.methods.balanceOf(investor).call();\n\n      setTokenBalance(_tokenBalance / Math.pow(10, USDC_DECIMALS));\n      const networkId = await web3.eth.net.getId();\n      const dexData = Dex.networks[networkId];\n\n      if (dexData) {\n        const _dexContract = new web3.eth.Contract(Dex.abi, dexData.address);\n\n        setDexContract(_dexContract);\n      } else {\n        window.alert(\"Dex contract not deployed to detected network\");\n      }\n    }\n  };\n\n  const swapEthHandler = async () => {\n    if (dexContract) {\n      await dexContract.methods.swapEthForUSDC(web3.utils.toWei(ethAmount, \"ether\")).send({\n        value: web3.utils.toWei(ethAmount, \"ether\"),\n        from: investor\n      });\n      const balance = await web3.eth.getBalance(investor);\n\n      const _tokenBalance = await tokenContract.methods.balanceOf(investor).call();\n\n      setTokenBalance(_tokenBalance / Math.pow(10, USDC_DECIMALS));\n      setEthBalance(web3.utils.fromWei(balance, \"ether\"));\n    }\n  };\n\n  const swapUSDCHandler = async () => {\n    if (dexContract) {\n      const networkId = await web3.eth.net.getId();\n      const dexData = Dex.networks[networkId];\n\n      if (dexData) {\n        const sendUSDC = tokenAmount * Math.pow(10, USDC_DECIMALS);\n        await tokenContract.methods.approve(dexData.address, sendUSDC).send({\n          from: investor\n        });\n        await dexContract.methods.swapUSDCForEth(sendUSDC).send({\n          from: investor\n        });\n        const balance = await web3.eth.getBalance(investor);\n\n        const _tokenBalance = await tokenContract.methods.balanceOf(investor).call();\n\n        setTokenBalance(_tokenBalance / Math.pow(10, USDC_DECIMALS));\n        setEthBalance(web3.utils.fromWei(balance, \"ether\"));\n      } else {\n        window.alert(\"Dex contract not deployed to detected network\");\n      }\n    }\n  };\n\n  const onEthEnteredHandler = ethAmount => {\n    setEthAmount(ethAmount);\n  };\n\n  const onTokenEnteredHandler = tokenAmount => {\n    setTokenAmount(tokenAmount);\n  };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(MainHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(WalletInfo, {\n        ethBalance: ethBalance,\n        tokenBalance: tokenBalance\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SwapEth, {\n        onEthEntered: onEthEnteredHandler,\n        onSwap: swapEthHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SwapUSDC, {\n        onTokenEntered: onTokenEnteredHandler,\n        onSwap: swapUSDCHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 128,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"kA1RpQ4sncOkZ5bhDinhpluba14=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Web3","Dex","ERC20Mock","WalletInfo","SwapEth","SwapUSDC","MainHeader","USDC_MAINNET","USDC_DECIMALS","App","web3","setweb3","ethBalance","setEthBalance","tokenBalance","setTokenBalance","investor","setInvestor","tokenContract","setTokenContract","dexContract","setDexContract","ethAmount","setEthAmount","tokenAmount","setTokenAmount","init","loadweb3","load","loadBlockchainData","window","ethereum","_web3","accounts","request","method","error","console","log","eth","getAccounts","balance","getBalance","utils","fromWei","_tokenContract","Contract","abi","_tokenBalance","methods","balanceOf","call","Math","pow","networkId","net","getId","dexData","networks","_dexContract","address","alert","swapEthHandler","swapEthForUSDC","toWei","send","value","from","swapUSDCHandler","sendUSDC","approve","swapUSDCForEth","onEthEnteredHandler","onTokenEnteredHandler"],"sources":["C:/Users/aosin/OneDrive/Desktop/Smart contract/Dapp/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport Web3 from \"web3\";\nimport Dex from \"./abi/Dex.json\";\nimport ERC20Mock from \"./abi/ERC20Mock.json\";\n\nimport WalletInfo from \"./components/WalletInfo/WalletInfo\";\nimport SwapEth from \"./components/SwapEth/SwapEth\";\nimport SwapUSDC from \"./components/SwapUSDC/SwapUSDC\";\nimport MainHeader from \"./components/MainHeader/MainHeader\";\n\nconst USDC_MAINNET = \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\";\nconst USDC_DECIMALS = 6;\n\nfunction App() {\n  const [web3, setweb3] = useState(\"\");\n  const [ethBalance, setEthBalance] = useState(1);\n  const [tokenBalance, setTokenBalance] = useState(1000000000);\n  const [investor, setInvestor] = useState(1000000000);\n  const [tokenContract, setTokenContract] = useState({});\n  const [dexContract, setDexContract] = useState({});\n  const [ethAmount, setEthAmount] = useState(0);\n  const [tokenAmount, setTokenAmount] = useState(0);\n\n  useEffect(() => {\n    const init = async () => {\n      await loadweb3();\n    };\n    init();\n  }, []);\n\n  useEffect(() => {\n    const load = async () => {\n      await loadBlockchainData();\n    };\n    load();\n  }, [web3]);\n\n  const loadweb3 = async () => {\n    if (window.ethereum) {\n      try {\n        const _web3 = new Web3(window.ethereum);\n        const accounts = await window.ethereum.request({\n          method: \"eth_requestAccounts\",\n        });\n        setweb3(_web3);\n      } catch (error) {\n        console.error(error);\n      }\n    } else {\n      console.log(\"Please Install metamask\");\n    }\n  };\n\n  const loadBlockchainData = async () => {\n    if (web3) {\n      const [investor] = await web3.eth.getAccounts();\n      setInvestor(investor);\n      const balance = await web3.eth.getBalance(investor);\n      setEthBalance(web3.utils.fromWei(balance, \"ether\"));\n      const _tokenContract = new web3.eth.Contract(ERC20Mock.abi, USDC_MAINNET);\n      setTokenContract(_tokenContract);\n      let _tokenBalance = await _tokenContract.methods\n        .balanceOf(investor)\n        .call();\n      setTokenBalance(_tokenBalance / Math.pow(10, USDC_DECIMALS));\n      const networkId = await web3.eth.net.getId();\n      const dexData = Dex.networks[networkId];\n      if (dexData) {\n        const _dexContract = new web3.eth.Contract(Dex.abi, dexData.address);\n        setDexContract(_dexContract);\n      } else {\n        window.alert(\"Dex contract not deployed to detected network\");\n      }\n    }\n  };\n\n  const swapEthHandler = async () => {\n    if (dexContract) {\n      await dexContract.methods\n        .swapEthForUSDC(web3.utils.toWei(ethAmount, \"ether\"))\n        .send({\n          value: web3.utils.toWei(ethAmount, \"ether\"),\n          from: investor,\n        });\n\n      const balance = await web3.eth.getBalance(investor);\n      const _tokenBalance = await tokenContract.methods\n        .balanceOf(investor)\n        .call();\n      setTokenBalance(_tokenBalance / Math.pow(10, USDC_DECIMALS));\n      setEthBalance(web3.utils.fromWei(balance, \"ether\"));\n    }\n  };\n\n  const swapUSDCHandler = async () => {\n    if (dexContract) {\n      const networkId = await web3.eth.net.getId();\n      const dexData = Dex.networks[networkId];\n      if (dexData) {\n        const sendUSDC = tokenAmount * Math.pow(10, USDC_DECIMALS);\n        await tokenContract.methods.approve(dexData.address, sendUSDC).send({\n          from: investor,\n        });\n        await dexContract.methods\n          .swapUSDCForEth(sendUSDC)\n          .send({ from: investor });\n        const balance = await web3.eth.getBalance(investor);\n        const _tokenBalance = await tokenContract.methods\n          .balanceOf(investor)\n          .call();\n        setTokenBalance(_tokenBalance / Math.pow(10, USDC_DECIMALS));\n        setEthBalance(web3.utils.fromWei(balance, \"ether\"));\n      } else {\n        window.alert(\"Dex contract not deployed to detected network\");\n      }\n    }\n  };\n\n  const onEthEnteredHandler = (ethAmount) => {\n    setEthAmount(ethAmount);\n  };\n  const onTokenEnteredHandler = (tokenAmount) => {\n    setTokenAmount(tokenAmount);\n  };\n\n  return (\n    <React.Fragment>\n      <MainHeader />\n      <main>\n        <WalletInfo ethBalance={ethBalance} tokenBalance={tokenBalance} />\n        <SwapEth onEthEntered={onEthEnteredHandler} onSwap={swapEthHandler} />\n        <SwapUSDC\n          onTokenEntered={onTokenEnteredHandler}\n          onSwap={swapUSDCHandler}\n        />\n      </main>\n    </React.Fragment>\n  );\n}\n\nexport default App;"],"mappings":"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"},"metadata":{},"sourceType":"module"}